import { Avatar, Heading, Stack, Text } from "@chakra-ui/react";
import { Player } from "@lottiefiles/react-lottie-player";
import type { GetStaticProps, NextPage } from "next";
import Head from "next/head";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";
import Badges from "../components/Badges";
import Layout from "../components/Layout";
import LoadingLayout from "../components/LoadingLayout";
import { auth } from "../firebase";
import useDB from "../hooks/useDB";
import { UserDoc } from "../interfaces/UserDoc";
import {
  getCodechefRating,
  getCodeforcesRating,
} from "../services/competitiveAPIServices";
import { getDocumentIDFromUsername, getUserDoc } from "../services/dbServices";

export const getStaticPaths = async () => {
  return {
    paths: [],
    fallback: "blocking",
  };
};

export const getStaticProps: GetStaticProps = async (context) => {
  const username = context.params?.username;

  const uid = await getDocumentIDFromUsername(username as string);
  if (uid) {
    const userDoc = await getUserDoc(uid);
    const codechefRating = await getCodechefRating(
      userDoc?.codechefHandle || ""
    );
    const codeforcesRating = await getCodeforcesRating(
      userDoc?.codeforcesHandle || ""
    );

    return {
      props: {
        name: userDoc?.name,
        username: userDoc?.username,
        photoURL: userDoc?.photoURL,
        codechefHandle: userDoc?.codechefHandle,
        codeforcesHandle: userDoc?.codeforcesHandle,
        codechefRating,
        codeforcesRating,
        userNotFound: false,
      },
      revalidate: 3600,
    };
  }

  return {
    props: {
      name: "",
      username: "",
      photoURL: "",
      codechefHandle: "",
      codeforcesHandle: "",
      codechefRating: "",
      codeforcesRating: "",
      userNotFound: true,
    },
  };
};

const Profile: NextPage<{
  name: string;
  username: string;
  photoURL: string;
  codechefHandle: string;
  codeforcesHandle: string;
  codechefRating: number;
  codeforcesRating: number;
  userNotFound: boolean;
}> = ({
  name,
  username,
  photoURL,
  codechefHandle,
  codeforcesHandle,
  codechefRating,
  codeforcesRating,
  userNotFound,
}) => {
  if (userNotFound)
    return (
      <Layout>
        <Heading>User Not Found</Heading>
      </Layout>
    );

  return (
    <Layout>
      <div className="w-full h-full flex flex-col justify-center items-center">
        <Head>
          <title>Complify</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <div className="h-56 w-56 sm:h-72 sm:w-72 flex justify-center items-center relative">
          <Player
            autoplay={true}
            loop={true}
            src="/circle-wave-lottie.json"
            speed={0.4}
            style={{
              height: "100%",
              width: "100%",
              top: "0",
              left: "0",
              position: "absolute",
              opacity: "70%",
            }}
          />
          <div className="h-3/5 w-3/5 border-4 border-green-500 rounded-full">
            <Avatar src={photoURL} size="full" />
          </div>
        </div>
        <Text className="text-2xl sm:text-3xl">{name}</Text>
        <Text className="text-md sm:text-lg opacity-80">{"@" + username}</Text>
        <Badges
          codchefHandle={codechefHandle}
          codechefRating={codechefRating}
          codeforcesHandle={codeforcesHandle}
          codeforcesRating={codeforcesRating}
        />
      </div>
    </Layout>
  );
};

export default Profile;
